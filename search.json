[{"title":"Key Points of NOIp Popularization Group","url":"/2020/05/05/Key-Points-of-NOIp-Popularization-Group/","content":"<h3 id=\"Entry-Level\"><a href=\"#Entry-Level\" class=\"headerlink\" title=\"Entry Level\"></a>Entry Level</h3><h4 id=\"P1035-summation-of-series\"><a href=\"#P1035-summation-of-series\" class=\"headerlink\" title=\"P1035 summation of series\"></a>P1035 summation of series</h4><blockquote>\n<p><strong>DESCRIPTION</strong></p>\n<p>Known: S<del>n</del>= 1+1/2+1/3+…+1/n​. </p>\n<p>It’s obvious that for any integer $k$ when integer $n$ is big enough, $S_n&gt;k$.</p>\n<p>Now give an integer $k$. Please find the smallest $n$ which makes $S_n&gt;k$.</p>\n<p><strong>INPUT FORMAT</strong></p>\n<p>A positive integer $k$.</p>\n<p><strong>OUTPUT FORMAT</strong></p>\n<p>A positive integer $n$.</p>\n<p><strong>SAMPLE</strong></p>\n<p>Input</p>\n<p>1</p>\n<p>Output</p>\n<p>2</p>\n<p><strong>TIPS</strong></p>\n<p>For 100% data, $1\\le k \\le 15$</p>\n</blockquote>\n<p>It should be noted that: integer data cannot appear in floating-point operations, otherwise it becomes an integer operation.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> sn=<span class=\"number\">0.0000</span>;<span class=\"comment\">//Pay attention to data accuracy</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp=<span class=\"number\">0.0000</span>;<span class=\"comment\">//Pay attention to data accuracy </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(sn&lt;=k)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tn++;</span><br><span class=\"line\">\t\ttemp=<span class=\"number\">1.0000</span>/n;<span class=\"comment\">//do not use int data </span></span><br><span class=\"line\">\t\tsn=sn+temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"Ordinary-Level\"><a href=\"#Ordinary-Level\" class=\"headerlink\" title=\"Ordinary- Level\"></a>Ordinary- Level</h3><h3 id=\"Ordinary-Level-1\"><a href=\"#Ordinary-Level-1\" class=\"headerlink\" title=\"Ordinary Level\"></a>Ordinary Level</h3><h3 id=\"Ordinary-Improved-Level\"><a href=\"#Ordinary-Improved-Level\" class=\"headerlink\" title=\"Ordinary+ / Improved Level\"></a>Ordinary+ / Improved Level</h3><h3 id=\"Improved-Provincial-Level\"><a href=\"#Improved-Provincial-Level\" class=\"headerlink\" title=\"Improved+ / Provincial Level\"></a>Improved+ / Provincial Level</h3>","tags":["NOIp"]}]