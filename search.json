[{"title":"Key Points of NOIp Popularization Group","url":"/2020/05/05/Key-Points-of-NOIp-Popularization-Group/","content":"<h3 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h3><h4 id=\"P1035-summation-of-series\"><a href=\"#P1035-summation-of-series\" class=\"headerlink\" title=\"P1035 summation of series\"></a>P1035 summation of series</h4><blockquote>\n<p><strong>DESCRIPTION</strong><br>Known: Sn= 1+1/2+1/3+…+1/n.<br>It’s obvious that for any integer k when integer n is big enough, Sn&gt;k.<br>Now give an integer k. Please find the smallest n which makes Sn&gt;k.<br><strong>INPUT FORMAT</strong><br>A positive integer k.<br><strong>OUTPUT FORMAT</strong><br>A positive integer n.<br><strong>SAMPLE</strong><br>Input        Output<br>1                2</p>\n<p><strong>TIPS</strong><br>For 100% data, 1&lt;=k&lt;=15</p>\n</blockquote>\n<p>It should be noted that: integer data cannot appear in floating-point operations, otherwise it becomes an integer operation.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> sn=<span class=\"number\">0.0000</span>;<span class=\"comment\">//Pay attention to data accuracy</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp=<span class=\"number\">0.0000</span>;<span class=\"comment\">//Pay attention to data accuracy </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(sn&lt;=k)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tn++;</span><br><span class=\"line\">\t\ttemp=<span class=\"number\">1.0000</span>/n;<span class=\"comment\">//do not use int data </span></span><br><span class=\"line\">\t\tsn=sn+temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"P5681-CSPJX2019-acreage-Unofficial-data\"><a href=\"#P5681-CSPJX2019-acreage-Unofficial-data\" class=\"headerlink\" title=\"P5681 [CSPJX2019]acreage[Unofficial data]\"></a>P5681 [CSPJX2019]acreage[Unofficial data]</h4><blockquote>\n<p><strong>DESCRIPTION</strong><br>Alice has a square with side length a. Bob has a rectangle of length b and width c.<br>Please tell them whose graphic area is larger.<br><strong>INPUT FORMAT</strong><br>Tree positive integers a,b,c.<br><strong>OUTPUT FORMAT</strong><br>A string. If the square area is large, output “Alice”, otherwise output Bob.<br><strong>SAMPLE</strong><br>Input<br>5 4 6<br>Output<br>Alice<br>Input<br>7 5 10<br>Output<br>Bob<br><strong>TIPS</strong><br>For 30% data, 1&lt;=a,b,c&lt;=100,b=c;<br>For 80% data, 1&lt;=a,b,c&lt;=10^4;<br>For 100% data, 1&lt;=a,b,c&lt;=10^9;</p>\n</blockquote>\n<p>It should be noted that: The range of integer data is not enough. So you can use long long data.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a,b,c;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a*a&gt;b*c) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Alice\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Bob\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In addition, as mentioned in the previous question, you can’t use int data in calculation. If you do this, the result will be converted to int. So you can use the following method to forcefully convert the data type. By forced type conversion, convert 1 to longlong type: 1LL.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a=<span class=\"number\">0</span>,b=<span class=\"number\">0</span>,c=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> r1,r2;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">\tr1=<span class=\"number\">1l</span>l*a*a; <span class=\"comment\">//By forced type conversion, convert 1 to longlong type.And then convert the calculation result to longlong type </span></span><br><span class=\"line\">\tr2=<span class=\"number\">1l</span>l*b*c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r1&gt;r2) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Alice\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Bob\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Of course you can change the calculation from Multiplicative to divided. By this way, you can use double data in this question.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> a,b,c;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a/b&gt;c/a) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Alice\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Bob\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The following is the upper limit of various data types for reference.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n_int=INT_MAX;</span><br><span class=\"line\">\tshort n_short=SHRT_MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> n_long=LONG_MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n_llong=LLONG_MAX;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"int is \"</span>&lt;&lt;<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)&lt;&lt;<span class=\"string\">\" bytes.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"short is \"</span>&lt;&lt;<span class=\"keyword\">sizeof</span> n_short&lt;&lt;<span class=\"string\">\" bytes.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"long is \"</span>&lt;&lt;<span class=\"keyword\">sizeof</span> n_long&lt;&lt;<span class=\"string\">\" bytes.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"long long is \"</span>&lt;&lt;<span class=\"keyword\">sizeof</span> n_llong&lt;&lt;<span class=\"string\">\" bytes.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>; </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Maximum values:\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"int: \"</span>&lt;&lt;n_int&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"short: \"</span>&lt;&lt;n_short&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"long: \"</span>&lt;&lt;n_long&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"long long: \"</span>&lt;&lt;n_llong&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Minimum int value=\"</span>&lt;&lt;INT_MIN&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Bits per byte= \"</span>&lt;&lt;CHAR_BIT&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> is <span class=\"number\">4</span> bytes.</span><br><span class=\"line\">short is <span class=\"number\">2</span> bytes.</span><br><span class=\"line\"><span class=\"keyword\">long</span> is <span class=\"number\">4</span> bytes.</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> is <span class=\"number\">8</span> bytes.</span><br><span class=\"line\"></span><br><span class=\"line\">Maximum values:</span><br><span class=\"line\"><span class=\"keyword\">int</span>: <span class=\"number\">2147483647</span></span><br><span class=\"line\">short: <span class=\"number\">32767</span></span><br><span class=\"line\"><span class=\"keyword\">long</span>: <span class=\"number\">2147483647</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span>: <span class=\"number\">9223372036854775807</span></span><br><span class=\"line\"></span><br><span class=\"line\">Minimum <span class=\"keyword\">int</span> value=<span class=\"number\">-2147483648</span></span><br><span class=\"line\">Bits per <span class=\"keyword\">byte</span>= <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"P1075-Prime-factorization\"><a href=\"#P1075-Prime-factorization\" class=\"headerlink\" title=\"P1075 Prime factorization\"></a>P1075 Prime factorization</h4><blockquote>\n<p><strong>DESCRIPTION</strong><br>Known:Positive integer n is the product of two different prime numbers.<br>Please find the larger of the two prime numbers<br><strong>INPUT FORMAT</strong><br>A positive integer n.<br><strong>OUTPUT FORMAT</strong><br>A positive integer p which is the larger prime number.<br><strong>SAMPLE</strong><br>Input<br>21<br>Output<br>7<br><strong>TIPS</strong><br>n&lt;=2*10^9</p>\n</blockquote>\n<p>At first I didn’t grasp the essence, the code was very complicated. This causes the algorithm to time out.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">2</span>;i&lt;a;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a%i==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//非质数返回0 </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=n;i&gt;<span class=\"number\">1</span>;i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n%i==<span class=\"number\">0</span> &amp;&amp;judge(i)==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;i;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>After catching the essence, I made some mistakes in the order of the loop.</p>\n<p>We should find that due to the nature of multiplication, we enumerate from low to high values faster than from high to low.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">2</span>;i&lt;=n/<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;n/i;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h4 id=\"P5015Headline-statistics\"><a href=\"#P5015Headline-statistics\" class=\"headerlink\" title=\"P5015Headline statistics\"></a>P5015Headline statistics</h4><blockquote>\n<p><strong>DESCRIPTION</strong><br>Kaikai has just written a wonderful composition. How many characters are there in the title of this composition?<br>Note: The title may contain uppercase and lowercase English letters, numeric characters, spaces, and line breaks.<br>When counting headline characters, spaces and line breaks are not counted.<br><strong>INPUT FORMAT</strong><br>The input file has only one line, a string s.<br><strong>OUTPUT FORMAT</strong><br>The output file has only one line and contains an integer, that is, the number of characters in the title of the composition (excluding spaces and line breaks).<br><strong>SAMPLE</strong><br>intput<br>234<br>output<br>3<br>input<br>Ca 45<br>output<br>4<br><strong>TIPS</strong><br>Provision | s | represents the length of the string s (that is, the number of characters and spaces in the string).<br>For 40% data, 1&lt;=| s |&lt;=5, ensure that the input is numeric characters and line breaks at the end of the line;<br>For 80% data, 1&lt;=| s |&lt;=5, the input may only contain uppercase and lowercase English letters, numeric characters, and end-of-line newlines;<br>For 100% data, 1&lt;=| s |&lt;=5, input may include upper and lower case English letters, numeric characters, spaces, and end-of-line newlines;</p>\n</blockquote>\n<p>Pay attention to the header file and the usage of getchar().</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c=<span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c!=<span class=\"string\">'\\n'</span>)<span class=\"comment\">//line breaks</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tc=getchar();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(c!=<span class=\"string\">' '</span>) l++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tl--; </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;l;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h3 id=\"Popularization\"><a href=\"#Popularization\" class=\"headerlink\" title=\"Popularization-\"></a>Popularization-</h3><h3 id=\"Popularization-Improvement\"><a href=\"#Popularization-Improvement\" class=\"headerlink\" title=\"Popularization/Improvement-\"></a>Popularization/Improvement-</h3><h3 id=\"Popularization-Improvement-1\"><a href=\"#Popularization-Improvement-1\" class=\"headerlink\" title=\"Popularization+/Improvement\"></a>Popularization+/Improvement</h3><h3 id=\"Improvement-Provincial-Election\"><a href=\"#Improvement-Provincial-Election\" class=\"headerlink\" title=\"Improvement+/Provincial Election-\"></a>Improvement+/Provincial Election-</h3>","tags":["NOIp如men"]}]